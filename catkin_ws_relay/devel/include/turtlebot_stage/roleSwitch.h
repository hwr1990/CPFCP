// Generated by gencpp from file turtlebot_stage/roleSwitch.msg
// DO NOT EDIT!


#ifndef TURTLEBOT_STAGE_MESSAGE_ROLESWITCH_H
#define TURTLEBOT_STAGE_MESSAGE_ROLESWITCH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace turtlebot_stage
{
template <class ContainerAllocator>
struct roleSwitch_
{
  typedef roleSwitch_<ContainerAllocator> Type;

  roleSwitch_()
    : valid(false)
    , preID(0)
    , candidateID(0)  {
    }
  roleSwitch_(const ContainerAllocator& _alloc)
    : valid(false)
    , preID(0)
    , candidateID(0)  {
    }



   typedef uint8_t _valid_type;
  _valid_type valid;

   typedef uint32_t _preID_type;
  _preID_type preID;

   typedef uint32_t _candidateID_type;
  _candidateID_type candidateID;




  typedef boost::shared_ptr< ::turtlebot_stage::roleSwitch_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::turtlebot_stage::roleSwitch_<ContainerAllocator> const> ConstPtr;

}; // struct roleSwitch_

typedef ::turtlebot_stage::roleSwitch_<std::allocator<void> > roleSwitch;

typedef boost::shared_ptr< ::turtlebot_stage::roleSwitch > roleSwitchPtr;
typedef boost::shared_ptr< ::turtlebot_stage::roleSwitch const> roleSwitchConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::turtlebot_stage::roleSwitch_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::turtlebot_stage::roleSwitch_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace turtlebot_stage

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/indigo/share/nav_msgs/cmake/../msg'], 'turtlebot_stage': ['/home/exbot/catkin_ws_relay/src/turtlebot_stage/msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::turtlebot_stage::roleSwitch_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turtlebot_stage::roleSwitch_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turtlebot_stage::roleSwitch_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turtlebot_stage::roleSwitch_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlebot_stage::roleSwitch_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlebot_stage::roleSwitch_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::turtlebot_stage::roleSwitch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e59b48a6f485ff9e719f4a2c1a1a9528";
  }

  static const char* value(const ::turtlebot_stage::roleSwitch_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe59b48a6f485ff9eULL;
  static const uint64_t static_value2 = 0x719f4a2c1a1a9528ULL;
};

template<class ContainerAllocator>
struct DataType< ::turtlebot_stage::roleSwitch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "turtlebot_stage/roleSwitch";
  }

  static const char* value(const ::turtlebot_stage::roleSwitch_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::turtlebot_stage::roleSwitch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool valid\n\
uint32 preID\n\
uint32 candidateID\n\
";
  }

  static const char* value(const ::turtlebot_stage::roleSwitch_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::turtlebot_stage::roleSwitch_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.valid);
      stream.next(m.preID);
      stream.next(m.candidateID);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct roleSwitch_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::turtlebot_stage::roleSwitch_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::turtlebot_stage::roleSwitch_<ContainerAllocator>& v)
  {
    s << indent << "valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.valid);
    s << indent << "preID: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.preID);
    s << indent << "candidateID: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.candidateID);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TURTLEBOT_STAGE_MESSAGE_ROLESWITCH_H
